import pytest
import base64
from pydantic_ai.models.test import TestModel

from api.context import Context, Entity
from api.pydantic_ai_agent import ImageDescriber


SETTING = "test setting"

ENTITIES = [
    Entity(category="person", name="bob", description="bob is a black male."),
    Entity(category="person", name="Jill",
           description="Jill is a white female with blond hair."),
    Entity(category="river", name="Yellow River",
           description="A large river with lots of setiment.")
]


@pytest.fixture
def anyio_backend():
    return 'asyncio'


@pytest.fixture(params=[Context(setting="", entities=[]), Context(setting=SETTING, entities=[]), Context(setting=SETTING, entities=ENTITIES)])
def context(request) -> Context:
    return request.param


@pytest.fixture
def image_describer(context) -> ImageDescriber:
    describer = ImageDescriber(context)
    with describer.agent.override(model=TestModel()):
        yield describer


@pytest.fixture
def red_square_file(tmp_path):
    # a 3x3 red square generated by chatgpt.
    binary_data = base64.decodebytes(
        b'iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAEElEQVR4nGP8zwAFTAyYLAAdWwEFNX6VDAAAAABJRU5ErkJggg==')
    file_path = tmp_path / "red_square.png"
    with open(file_path, "wb") as f:
        # Write the binary content of the file
        f.write(binary_data)
    return file_path
